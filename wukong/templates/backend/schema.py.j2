from __future__ import annotations # For Pydantic v2 forward references
from pydantic import BaseModel, Field
from typing import Optional, List, Any

{% if CRUDApiGenerator._has_datetime_or_date_column(table) %}
from datetime import datetime, date
{% endif %}

{% for other_table in all_tables %}
{% if other_table.name != table.name %}
    {% for fk in other_table.foreign_keys %}
        {# Check if 'this' table is the referenced table (parent) for 'other_table' (child) #}
        {% if fk.ref_table == table.name %}
from .{{ other_table.name | snake_case }} import {{ other_table.name | pascal_case }}Read
        {% endif %}
    {% endfor %}
{% endif %}
{% endfor %}


# Base Schema
class {{ table_pascal_case }}Base(BaseModel):
    {% for column in columns %}
    {{ column.name | snake_case }}: {{ CRUDApiGenerator._get_pydantic_type(column) }}
    {% endfor %}

    class Config:
        from_attributes = True # For Pydantic v2
        populate_by_name = True # Allow field names to be populated by their alias (if any)


# Create Schema
class {{ table_pascal_case }}Create({{ table_pascal_case }}Base):
    {% for column in columns %}
    {% if CRUDApiGenerator._is_auto_generated_pk(column) %}
    {{ column.name | snake_case }}: Any = Field(default=None, exclude=True) # Exclude auto-generated PK from input
    {% endif %}
    {% endfor %}
    pass


# Update Schema
class {{ table_pascal_case }}Update({{ table_pascal_case }}Base):
    {% for column in columns %}
    {{ column.name | snake_case }}: Optional[{{ CRUDApiGenerator._get_pydantic_type(column) }}] = Field(default=None)
    {% endfor %}

# Read Schema (basic, without relations)
class {{ table_pascal_case }}Read({{ table_pascal_case }}Base):
    {{ CRUDApiGenerator._get_pk_name(table) | snake_case }}: {{ CRUDApiGenerator._get_pk_type(table) }}


# Final Response Schema (includes relationships if applicable)
class {{ table_pascal_case }}({{ table_pascal_case }}Read):
    {% for child_table in all_tables %}
    {% if child_table.name != table.name %}
        {% for fk in child_table.foreign_keys %}
            {% if fk.ref_table == table.name %}
    {{ child_table.name | pluralize | snake_case }}_collection: List[{{ child_table.name | pascal_case }}Read] = []
            {% endif %}
        {% endfor %}
    {% endif %}
    {% endfor %}
    pass # No new fields needed if only inheriting and adding relationships