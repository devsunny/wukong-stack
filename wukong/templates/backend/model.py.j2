from __future__ import annotations
from typing import List
import uuid
{% for impt in utils.get_datetime_imports(table) %}from datetime import {{impt}}
{% endfor %}
from sqlalchemy import Column, ForeignKey, func {% for impt in utils.get_sqlalchemy_type_imports(table) %},{{impt}} {% endfor %}  
from sqlalchemy.orm import relationship, Mapped, mapped_column

# Base is typically imported from database.py in a real project structure
# For standalone template rendering, we define it here.
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()

class {{ table_pascal_case }}(Base):
    __tablename__ = "{{ table.name }}"
    {% if table.schema %}
    __table_args__ = (
    {% if table.foreign_keys %}
        {% for fk in table.foreign_keys %}
            {% if fk.is_composite_key %}
                {{ utils.to_composite_fk_str(fk) }},
            {% endif %}
        {% endfor %}
    {% endif %}
    {'schema': '{{ table.schema }}',})
    {% endif %}

    {% for column in columns %}
    {{ column.name | snake_case }}: Mapped[{{ utils.get_python_type(column) }}] = mapped_column("{{column.name}}",
        {{ utils.get_sqlalchemy_type(column) }},
        {% if column.foreign_key_ref and column.foreign_key_ref[0] %}        
        ForeignKey("{{column.foreign_key_ref[0]}}.{{column.foreign_key_ref[1]}}.{{column.foreign_key_ref[2]}}"),
        {% elif column.foreign_key_ref %}
        ForeignKey("{{column.foreign_key_ref[1]}}.{{column.foreign_key_ref[2]}}"),
        {% endif %}
        {% if column.is_primary %}
        primary_key=True,
        {% endif %}
        {% if not column.nullable %}
        nullable=False,
        {% endif %}        
        {% if utils.should_use_server_default(column) %}
        server_default=func.now(),
        {% elif column.default_value is not none %} {# Only use default if not server_default and default_value exists #}
            {% if column.data_type.lower() in ['varchar', 'text', 'char', 'uuid', 'json', 'jsonb', 'date', 'timestamp', 'timestamptz', 'datetime', 'time'] %}
        default="{{ column.default_value }}",
            {% else %}
        default={{ column.default_value }},
            {% endif %}
        {% endif %}
        )    
    {% endfor %}

      
    

    def __repr__(self):
        return f"<{{ table_pascal_case }}({{ utils.get_pk_names_for_repr(table) }})>"

